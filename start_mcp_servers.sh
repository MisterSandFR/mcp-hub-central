#!/bin/bash

# Script de dÃ©marrage pour tous les serveurs MCP
# Usage: ./start_mcp_servers.sh

echo "ğŸš€ DÃ©marrage des serveurs MCP..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages colorÃ©s
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rifier si Docker est installÃ©
if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas installÃ© ou n'est pas dans le PATH"
    exit 1
fi

# VÃ©rifier si Docker Compose est installÃ©
if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas installÃ© ou n'est pas dans le PATH"
    exit 1
fi

print_status "VÃ©rification de la configuration..."

# VÃ©rifier si le fichier de configuration existe
if [ ! -f "mcp_servers_config.json" ]; then
    print_error "Fichier mcp_servers_config.json introuvable"
    exit 1
fi

# VÃ©rifier si le fichier docker-compose.yml existe
if [ ! -f "docker-compose.yml" ]; then
    print_error "Fichier docker-compose.yml introuvable"
    exit 1
fi

print_status "ArrÃªt des conteneurs existants..."
docker-compose down

print_status "Construction et dÃ©marrage des conteneurs..."
docker-compose up -d --build

# Attendre que les conteneurs soient prÃªts
print_status "Attente du dÃ©marrage des conteneurs..."
sleep 10

# VÃ©rifier le statut des conteneurs
print_status "VÃ©rification du statut des conteneurs..."
docker-compose ps

# Tester la connectivitÃ© des serveurs MCP
print_status "Test de connectivitÃ© des serveurs MCP..."

# Fonction pour tester un serveur
test_server() {
    local name=$1
    local port=$2
    local url="http://localhost:$port/health"
    
    print_status "Test de $name sur le port $port..."
    
    if curl -s --connect-timeout 5 "$url" > /dev/null; then
        print_success "$name est en ligne sur le port $port"
        return 0
    else
        print_warning "$name n'est pas accessible sur le port $port"
        return 1
    fi
}

# Tester chaque serveur
servers_online=0
total_servers=5

test_server "MCP Hub Central" 8000 && ((servers_online++))
test_server "Supabase MCP Server" 8001 && ((servers_online++))
test_server "File Manager MCP Server" 8002 && ((servers_online++))
test_server "Git MCP Server" 8003 && ((servers_online++))
test_server "Web Scraping MCP Server" 8004 && ((servers_online++))

# RÃ©sumÃ©
echo ""
print_status "=== RÃ‰SUMÃ‰ ==="
print_status "Serveurs en ligne: $servers_online/$total_servers"

if [ $servers_online -eq $total_servers ]; then
    print_success "Tous les serveurs MCP sont opÃ©rationnels !"
    print_status "AccÃ©dez au hub central: http://localhost:8000"
    print_status "AccÃ©dez Ã  l'interface web: https://mcp.coupaul.fr"
else
    print_warning "Certains serveurs ne sont pas encore prÃªts"
    print_status "VÃ©rifiez les logs avec: docker-compose logs"
fi

echo ""
print_status "Commandes utiles:"
print_status "  - Voir les logs: docker-compose logs -f"
print_status "  - ArrÃªter les services: docker-compose down"
print_status "  - RedÃ©marrer: docker-compose restart"
print_status "  - Statut: docker-compose ps"


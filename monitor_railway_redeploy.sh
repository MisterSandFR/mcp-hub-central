#!/bin/bash

# Script de monitoring du red√©ploiement Railway
# Usage: ./monitor_railway_redeploy.sh

echo "‚è≥ Monitoring du red√©ploiement Railway"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[MONITOR]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[‚úÖ SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[‚ùå ERROR]${NC} $1"
}

HUB_URL="https://mcp.coupaul.fr"

print_status "=== MONITORING DU RED√âPLOIEMENT RAILWAY ==="
print_status "Hub Central: $HUB_URL"
print_status "D√©marrage du monitoring..."

# Fonction pour v√©rifier la version
check_version() {
    local version=$(curl -s --max-time 10 "$HUB_URL/api/servers" 2>/dev/null | grep -o '"version":"[^"]*"' | head -1 | cut -d'"' -f4)
    echo "$version"
}

# Fonction pour v√©rifier les performances
check_performance() {
    local perf=$(curl -w "@-" -o /dev/null -s --max-time 15 "$HUB_URL/" <<< "time_total: %{time_total}\n" 2>/dev/null)
    local time_total=$(echo "$perf" | grep "time_total:" | awk '{print $2}')
    echo "$time_total"
}

# Fonction pour v√©rifier le serveur Minecraft
check_minecraft() {
    local response=$(curl -s --max-time 10 "$HUB_URL/api/servers" 2>/dev/null)
    if echo "$response" | grep -q "minecraft"; then
        echo "detected"
    else
        echo "not_detected"
    fi
}

echo ""
print_status "=== MONITORING EN COURS ==="
print_status "V√©rification toutes les 30 secondes..."
print_status "Appuyez sur Ctrl+C pour arr√™ter"

# Compteur
counter=0
max_attempts=20  # 10 minutes maximum

while [ $counter -lt $max_attempts ]; do
    counter=$((counter + 1))
    
    print_status "--- Tentative $counter/$max_attempts ---"
    
    # V√©rifier la version
    version=$(check_version)
    if [ -n "$version" ]; then
        print_status "Version d√©tect√©e: $version"
        
        if [ "$version" = "3.3.0" ]; then
            print_success "‚úÖ Version √† jour (3.3.0) - Red√©ploiement r√©ussi !"
            
            # V√©rifier les performances
            performance=$(check_performance)
            if [ -n "$performance" ]; then
                print_status "Performance: ${performance}s"
                
                if (( $(echo "$performance < 3.0" | bc -l 2>/dev/null || echo "0") )); then
                    print_success "‚úÖ Performances bonnes (< 3s)"
                else
                    print_warning "‚ö†Ô∏è Performances encore lentes (> 3s)"
                fi
            fi
            
            # V√©rifier le serveur Minecraft
            minecraft_status=$(check_minecraft)
            if [ "$minecraft_status" = "detected" ]; then
                print_success "‚úÖ Serveur Minecraft d√©tect√©"
            else
                print_warning "‚ö†Ô∏è Serveur Minecraft non d√©tect√©"
            fi
            
            echo ""
            print_success "üéâ RED√âPLOIEMENT R√âUSSI !"
            print_status "Le MCP Hub Central est maintenant √† jour avec la version 3.3.0"
            exit 0
        else
            print_warning "‚ö†Ô∏è Version obsol√®te ($version) - Red√©ploiement en cours..."
        fi
    else
        print_error "‚ùå Impossible de v√©rifier la version"
    fi
    
    # Attendre 30 secondes
    if [ $counter -lt $max_attempts ]; then
        print_status "Attente de 30 secondes..."
        sleep 30
    fi
done

echo ""
print_error "üö® TIMEOUT: Red√©ploiement Railway non d√©tect√© apr√®s 10 minutes"
print_warning "Actions recommand√©es:"
print_status "1. Aller sur Railway Dashboard manuellement"
print_status "2. V√©rifier les logs Railway"
print_status "3. Forcer un red√©ploiement manuel"
print_status "4. V√©rifier les variables d'environnement"

echo ""
print_status "=== COMMANDES DE V√âRIFICATION MANUELLE ==="
print_status "curl -s '$HUB_URL/api/servers' | jq '.hub.version'"
print_status "curl -w '@-' -o /dev/null -s '$HUB_URL/' <<< 'time_total: %{time_total}\n'"

exit 1
